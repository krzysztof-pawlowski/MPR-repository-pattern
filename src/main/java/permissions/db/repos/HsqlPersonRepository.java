package permissions.db.repos;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import permissions.db.PagingInfo;
import permissions.db.PersonRepository;
import permissions.db.mapper.PersonMapper;
import permissions.domain.Person;

public class HsqlPersonRepository implements PersonRepository {

    private Connection connection;

    private PersonMapper personMapper;

    private String createPersonTable = ""
        + "CREATE TABLE Person("
        + "id bigint GENERATED BY DEFAULT AS IDENTITY,"
        + "name VARCHAR(20),"
        + "surname VARCHAR(50)"
        + ")";

    public HsqlPersonRepository(Connection connection) {
        this.connection = connection;

        this.personMapper = new PersonMapper(connection);

        try {

            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);

            boolean tableExists = false;
            while (rs.next()) {
                if (rs.getString("TABLE_NAME").equalsIgnoreCase("Person")) {
                    tableExists = true;
                    break;
                }
            }
            if (!tableExists) {
                Statement createTable = connection.createStatement();
                createTable.executeUpdate(createPersonTable);
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }

    }

    @Override
    public Person withId(int id) {
        return personMapper.find((long) id);
    }

    public List<Person> allOnPage(PagingInfo page) {
        return personMapper.findAllOnPage(page);
    }

    public void add(Person person) {
        personMapper.add(person);

    }

    public void modify(Person p) {
        personMapper.update(p);
    }

    public void remove(Person p) {
        personMapper.remove((long) p.getId());
    }

    public List<Person> withSurname(String surname, PagingInfo page) {
        return personMapper.withSurname(surname, page);
    }

    public List<Person> withName(String name, PagingInfo page) {
        return personMapper.withName(name, page);
    }

}
